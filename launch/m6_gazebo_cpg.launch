<?xml version="1.0" ?>
<launch>

  <!--Launch World-->
  <include file="$(find xMonsterCPG)/launch/quickWorld.launch"/>
  <!--<include file="$(find aws_robomaker_small_house_world)/launch/small_house.launch">-->

  <!-- just to show the robot in the gazebo, no controller involved -->
  <arg name="model" default="$(find xMonsterCPG)/urdf/m6.urdf.xacro" />
  <param name="robot_description" command="rosrun xacro xacro $(arg model)" />
  <node
    name="spawn_model"
    pkg="gazebo_ros"
    type="spawn_model"
    args="-x -1 -y 2 -urdf -model robot -param robot_description"
    output="screen" />

  <!-- run the state publisher node by default -->

  <!-- <node pkg="joint_state_publisher" type="joint_state_publisher" name="rob_st_pub" >
    </node> -->

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="rob_st_pub" >
      <remap from="/joint_states" to="/m6/joint_states" />
    </node>


  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find xMonsterCPG)/config/m6_controllers.yaml" command="load"/>

  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/m6" args="
  base1_position_controller shoulder1_position_controller elbow1_position_controller base2_position_controller shoulder2_position_controller
  elbow2_position_controller base3_position_controller shoulder3_position_controller elbow3_position_controller base4_position_controller
  shoulder4_position_controller elbow4_position_controller base5_position_controller shoulder5_position_controller elbow5_position_controller
  base6_position_controller shoulder6_position_controller elbow6_position_controller joint_state_controller"/>

  <!--
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/m6/joint_states" />
  </node> -->
 <node name= "control_cpg" pkg="xMonsterCPG" output="screen" type="laptop.py"/>
 <node name= "odom_publisher" pkg="xMonsterCPG" output="screen" type="odom_ground_truth_publish.py"/>
 <!-- <node name= "elevation_map_pointcloud" pkg="xMonsterCPG" output="screen" type="depth_map.py"/> -->
 <node name= "keyboard" pkg="xMonsterCPG" output="screen" type="keyboard_input.py"/>
  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find xMonsterCPG)/rviz/rviz.rviz"/> -->
  <node pkg="tf" type="static_transform_publisher"  name="camera_color_to_color_out" args="0 0 0 0 0 0 realsense_d435_camera_color_optical_frame realsense_d435_cameracolor 100" />

  <node pkg="tf" type="static_transform_publisher"  name="camera_depth_to_depth_out" args="0 0 0 0 0 0 realsense_d435_camera_depth_optical_frame realsense_d435_cameradepth 100" />

  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
    <param name="resolution" value="0.05" />
    <param name="occupancy_max_z" value="0.3" />
    <param name="base_frame_id" type="string" value="realsense_d435_camera_depth_optical_frame" />
    <param name="frame_id" type="string" value="map" />
    <param name="sensor_model/max_range" value="10.0" /> <!-- distance in the frame_id required-->
    <remap from="cloud_in" to="/realsense_d435/depth/points" />
    </node>

  <!-- <node pkg="nodelet" type="nodelet" name="cloudify"
        args="load depth_image_proc/point_cloud_xyz">
    <remap from="image_rect" to="/realsense_d435/camera/depth/image_raw"/>
    <remap from="points" to="/realsense_d435/camera/depth/points"/>
    <remap from="camera_info" to="/realsense_d435/camera/depth/camera_info"/>
  </node> -->

</launch>
